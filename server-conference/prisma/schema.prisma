generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Logs {
  id            Int      @id(map: "PK___Logs") @default(autoincrement()) @map("Id")
  message       String?  @map("Message") @db.NVarChar(Max)
  level         String?  @map("Level") @db.NVarChar(128)
  timeStamp     DateTime @map("TimeStamp") @db.DateTime
  exception     String?  @map("Exception") @db.NVarChar(Max)
  logEvent      String?  @map("LogEvent") @db.NVarChar(Max)
  correlationId String?  @map("CorrelationId") @db.UniqueIdentifier

  @@map("__Logs")
}

model User {
  id       Int    @id @default(autoincrement()) @map("Id")
  email    String @unique @map("Email")
  password String @map("Password")
}

model Conference {
  id                       Int                      @id(map: "PK_Conference") @default(autoincrement()) @map("Id")
  conferenceTypeId         Int                      @map("ConferenceTypeId")
  locationId               Int                      @map("LocationId")
  organizerEmail           String                   @map("OrganizerEmail") @db.NVarChar(50)
  categoryId               Int                      @map("CategoryId")
  startDate                DateTime?                @map("StartDate") @db.DateTime
  endDate                  DateTime?                @map("EndDate") @db.DateTime
  name                     String                   @map("Name") @db.NVarChar(255)
  dictionaryCategory       DictionaryCategory       @relation(fields: [categoryId], references: [id], onUpdate: NoAction, map: "FK_Conference_DictionaryCategory")
  dictionaryConferenceType DictionaryConferenceType @relation(fields: [conferenceTypeId], references: [id], onUpdate: NoAction, map: "FK_Conference_DictionaryConferenceType")
  location                 Location                 @relation(fields: [locationId], references: [id], onUpdate: NoAction, map: "FK_Conference_Location")
  conferenceXAttendee      ConferenceXAttendee[]
  conferenceXSpeaker       ConferenceXSpeaker[]
  feedback                 Feedback[]
}

model ConferenceXAttendee {
  id               Int              @id(map: "PK_ConferenceXAttendee") @default(autoincrement()) @map("Id")
  attendeeEmail    String           @map("AttendeeEmail") @db.NVarChar(50)
  conferenceId     Int              @map("ConferenceId")
  statusId         Int              @map("StatusId")
  name             String?          @map("Name") @db.NVarChar(255)
  phoneNumber      String?          @map("PhoneNumber") @db.NVarChar(50)
  conference       Conference       @relation(fields: [conferenceId], references: [id], onUpdate: NoAction, onDelete: Cascade, map: "FK_ConferenceXAttendee_Conference")
  dictionaryStatus DictionaryStatus @relation(fields: [statusId], references: [id], onUpdate: NoAction, map: "FK_ConferenceXAttendee_DictionaryStatus")

  @@unique([attendeeEmail, conferenceId], map: "IX_ConferenceXAttendee")
}

model ConferenceXSpeaker {
  id            Int        @id(map: "PK_ConferenceXSpeaker") @default(autoincrement()) @map("Id")
  conferenceId  Int        @map("ConferenceId")
  speakerId     Int        @map("SpeakerId")
  isMainSpeaker Boolean?   @map("IsMainSpeaker")
  conference    Conference @relation(fields: [conferenceId], references: [id], onUpdate: NoAction, onDelete: Cascade, map: "FK_ConferenceXSpeaker_Conference")
  speaker       Speaker    @relation(fields: [speakerId], references: [id], onUpdate: NoAction, map: "FK_ConferenceXSpeaker_Speaker")

  @@unique([conferenceId, speakerId], map: "IX_ConferenceXSpeaker")
}

model DictionaryCategory {
  id         Int          @id(map: "PK_DictionaryCategory") @default(autoincrement()) @map("Id")
  name       String       @map("Name") @db.NVarChar(255)
  code       String       @map("Code") @db.NVarChar(50)
  conference Conference[]
}

model DictionaryCity {
  id       Int        @id(map: "PK_DictionaryCity") @default(autoincrement()) @map("Id")
  name     String     @map("Name") @db.NVarChar(255)
  code     String     @map("Code") @db.NVarChar(50)
  location Location[]
}

model DictionaryConferenceType {
  id         Int          @id(map: "PK_DictionaryConferenceType") @default(autoincrement()) @map("Id")
  name       String       @map("Name") @db.NVarChar(255)
  code       String       @map("Code") @db.NVarChar(50)
  conference Conference[]
}

model DictionaryCountry {
  id       Int        @id(map: "PK_DictionaryCountry") @default(autoincrement()) @map("Id")
  name     String     @map("Name") @db.NVarChar(255)
  code     String     @map("Code") @db.NVarChar(50)
  location Location[]
}

model DictionaryCounty {
  id       Int        @id(map: "PK_DictionaryCounty") @default(autoincrement()) @map("Id")
  name     String     @map("Name") @db.NVarChar(255)
  code     String     @map("Code") @db.NVarChar(50)
  location Location[]
}

model DictionaryStatus {
  id                  Int                   @id(map: "PK_DictionaryStatus") @default(autoincrement()) @map("Id")
  name                String                @map("Name") @db.NVarChar(255)
  code                String                @map("Code") @db.NVarChar(50)
  conferenceXAttendee ConferenceXAttendee[]
}

model EmailNotification {
  id       Int      @id(map: "PK__EmailNot__3214EC07A80EDA7C") @default(autoincrement()) @map("Id")
  to       String   @map("To:") @db.NVarChar(Max)
  cc       String?  @map("Cc:") @db.NVarChar(Max)
  subject  String   @map("Subject") @db.NVarChar(Max)
  message  String   @map("Message") @db.NVarChar(Max)
  sendDate DateTime @default(now(), map: "DF_EmailNotificationTimeStamp") @map("SendDate") @db.DateTime
}

model Feedback {
  id            Int         @id(map: "PK__Feedback__3214EC07517E48D0") @default(autoincrement()) @map("Id")
  attendeeEmail String?     @map("AttendeeEmail") @db.NVarChar(Max)
  conferenceId  Int?        @map("ConferenceId")
  speakerId     Int?        @map("SpeakerId")
  rating        Decimal?    @map("Rating") @db.Decimal(5, 2)
  message       String?     @map("Message") @db.NVarChar(Max)
  conference    Conference? @relation(fields: [conferenceId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Feedback_Conference")
  speaker       Speaker?    @relation(fields: [speakerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Feedback_Speaker")
}

model Location {
  id                Int               @id(map: "PK_Location") @default(autoincrement()) @map("Id")
  name              String?           @map("Name") @db.NVarChar(255)
  code              String?           @map("Code") @db.NVarChar(50)
  countryId         Int               @map("CountryId")
  address           String?           @map("Address") @db.NVarChar(255)
  countyId          Int               @map("CountyId")
  cityId            Int               @map("CityId")
  latitude          Decimal?          @map("Latitude") @db.Decimal(12, 9)
  longitude         Decimal?          @map("Longitude") @db.Decimal(12, 9)
  conference        Conference[]
  dictionaryCity    DictionaryCity    @relation(fields: [cityId], references: [id], onUpdate: NoAction, map: "FK_Location_DictionaryCity")
  dictionaryCountry DictionaryCountry @relation(fields: [countryId], references: [id], onUpdate: NoAction, map: "FK_Location_DictionaryCountry")
  dictionaryCounty  DictionaryCounty  @relation(fields: [countyId], references: [id], onUpdate: NoAction, map: "FK_Location_DictionaryCounty")
}

model SmsNotification {
  id          Int      @id(map: "PK__SMSNotif__3214EC0744B16B41") @default(autoincrement()) @map("Id")
  phoneNumber String   @map("PhoneNumber") @db.VarChar(20)
  message     String   @map("Message") @db.NVarChar(Max)
  sendDate    DateTime @default(now(), map: "DF_SMSNotificationTimeStamp") @map("SendDate") @db.DateTime

  @@map("SMSNotification")
}

model Speaker {
  id                 Int                  @id(map: "PK_Speaker") @default(autoincrement()) @map("Id")
  name               String               @map("Name") @db.NVarChar(255)
  nationality        String?              @map("Nationality") @db.NVarChar(50)
  rating             Decimal?             @map("Rating") @db.Decimal(5, 2)
  image              Bytes?               @map("Image") @db.Image
  phoneNumber        String?              @map("PhoneNumber") @db.NVarChar(50)
  email              String?              @map("Email") @db.VarChar(255)
  conferenceXSpeaker ConferenceXSpeaker[]
  feedback           Feedback[]
}

model Sysdiagrams {
  name        String @db.NVarChar(128)
  principalId Int    @map("principal_id")
  diagramId   Int    @id(map: "PK__sysdiagr__C2B05B618D4C2031") @default(autoincrement()) @map("diagram_id")
  version     Int?
  definition  Bytes?

  @@unique([principalId, name], map: "UK_principal_name")
  @@map("sysdiagrams")
}
